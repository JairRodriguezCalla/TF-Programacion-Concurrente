version: "3.9"

services:
  # ---------- REDIS ----------
  redis:
    image: redis:7-alpine
    container_name: redis-local
    networks:
      p2pnet:
        ipv4_address: 172.25.0.10
    ports:
      - "6379:6379"

  # ---------- MONGODB ----------
  mongo:
    image: mongo:6-jammy # Usamos una imagen oficial de MongoDB
    container_name: mongo-db
    networks:
      p2pnet:
        ipv4_address: 172.25.0.60 # IP fija para MongoDB
    ports:
      - "27017:27017" # Puerto por defecto de MongoDB
    volumes:
      - mongo_data:/data/db # Persistencia de datos para MongoDB

  # ---------- WORKERS ----------
  worker1:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: worker1
    environment:
      - WORKERS=1
      - DELAY_MS=1
      - REDIS_ADDR=redis:6379
      - WORKER_ID=W1
    depends_on: [redis]
    networks:
      p2pnet:
        ipv4_address: 172.25.0.21

  worker2:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: worker2
    environment:
      - WORKERS=1
      - DELAY_MS=1
      - REDIS_ADDR=redis:6379
      - WORKER_ID=W2
    depends_on: [redis]
    networks:
      p2pnet:
        ipv4_address: 172.25.0.22

  worker3:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: worker3
    environment:
      - WORKERS=1
      - DELAY_MS=1
      - REDIS_ADDR=redis:6379
      - WORKER_ID=W3
    depends_on: [redis]
    networks:
      p2pnet:
        ipv4_address: 172.25.0.23

  # ---------- PUSHER ----------
  pushjob:
    build:
      context: .
      dockerfile: docker/push_job/Dockerfile
    container_name: pushjob
    environment:
      - REDIS_ADDR=redis:6379
      - CANTIDAD=100
    depends_on: [redis, worker1, worker2, worker3]
    networks:
      p2pnet:
        ipv4_address: 172.25.0.30
    restart: "no"

  # ---------- COLLECTOR ----------
  collector:
    build:
      context: .
      dockerfile: docker/collector/Dockerfile
    container_name: collector
    environment:
      - REDIS_ADDR=redis:6379
      - CANTIDAD=100
    volumes:
      - ./results:/app/results
    depends_on: [redis, worker1, worker2, worker3]
    networks:
      p2pnet:
        ipv4_address: 172.25.0.40
    restart: "no"

  # ---------- API ----------
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: api
    environment:
      - REDIS_ADDR=redis:6379
      - MONGO_URI=mongodb://mongo:27017 # Variable de entorno para la URI de Mongo
      - PORT=8080
    depends_on: [redis, mongo] # Ahora tambi√©n depende de MongoDB
    networks:
      p2pnet:
        ipv4_address: 172.25.0.50
    ports:
      - "8080:8080"
    restart: "no"

networks:
  p2pnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:
  mongo_data: # Define un volumen para la persistencia de datos de MongoDB
